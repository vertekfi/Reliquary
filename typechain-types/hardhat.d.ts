/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "AccessControlCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlCurve__factory>;
    getContractFactory(
      name: "Constant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Constant__factory>;
    getContractFactory(
      name: "OwnableCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableCurve__factory>;
    getContractFactory(
      name: "Gym",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Gym__factory>;
    getContractFactory(
      name: "UseRandom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UseRandom__factory>;
    getContractFactory(
      name: "DepositHelperERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositHelperERC4626__factory>;
    getContractFactory(
      name: "IWeth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeth__factory>;
    getContractFactory(
      name: "DepositHelperReaperBPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositHelperReaperBPT__factory>;
    getContractFactory(
      name: "IReaperVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReaperVault__factory>;
    getContractFactory(
      name: "IReZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReZap__factory>;
    getContractFactory(
      name: "IWeth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeth__factory>;
    getContractFactory(
      name: "IAssetManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssetManager__factory>;
    getContractFactory(
      name: "IEmissionCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmissionCurve__factory>;
    getContractFactory(
      name: "INFTDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTDescriptor__factory>;
    getContractFactory(
      name: "IReliquary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReliquary__factory>;
    getContractFactory(
      name: "IReliquaryGamified",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReliquaryGamified__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "NFTDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTDescriptor__factory>;
    getContractFactory(
      name: "NFTDescriptorPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTDescriptorPair__factory>;
    getContractFactory(
      name: "NFTDescriptorSingle4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTDescriptorSingle4626__factory>;
    getContractFactory(
      name: "Reliquary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reliquary__factory>;
    getContractFactory(
      name: "ReliquaryEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReliquaryEvents__factory>;
    getContractFactory(
      name: "ReliquaryGamified",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReliquaryGamified__factory>;
    getContractFactory(
      name: "ReliquaryVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReliquaryVoting__factory>;
    getContractFactory(
      name: "ChildRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChildRewarder__factory>;
    getContractFactory(
      name: "DepositBonusRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositBonusRewarder__factory>;
    getContractFactory(
      name: "MultiplierRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiplierRewarder__factory>;
    getContractFactory(
      name: "MultiplierRewarderOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiplierRewarderOwnable__factory>;
    getContractFactory(
      name: "ParentRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParentRewarder__factory>;
    getContractFactory(
      name: "SingleAssetRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleAssetRewarder__factory>;
    getContractFactory(
      name: "EmissionCurveMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmissionCurveMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "NftDescriptorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NftDescriptorMock__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "AccessControlCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlCurve>;
    getContractAt(
      name: "Constant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Constant>;
    getContractAt(
      name: "OwnableCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableCurve>;
    getContractAt(
      name: "Gym",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Gym>;
    getContractAt(
      name: "UseRandom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UseRandom>;
    getContractAt(
      name: "DepositHelperERC4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositHelperERC4626>;
    getContractAt(
      name: "IWeth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeth>;
    getContractAt(
      name: "DepositHelperReaperBPT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositHelperReaperBPT>;
    getContractAt(
      name: "IReaperVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReaperVault>;
    getContractAt(
      name: "IReZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReZap>;
    getContractAt(
      name: "IWeth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeth>;
    getContractAt(
      name: "IAssetManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssetManager>;
    getContractAt(
      name: "IEmissionCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmissionCurve>;
    getContractAt(
      name: "INFTDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTDescriptor>;
    getContractAt(
      name: "IReliquary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReliquary>;
    getContractAt(
      name: "IReliquaryGamified",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReliquaryGamified>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "NFTDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTDescriptor>;
    getContractAt(
      name: "NFTDescriptorPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTDescriptorPair>;
    getContractAt(
      name: "NFTDescriptorSingle4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTDescriptorSingle4626>;
    getContractAt(
      name: "Reliquary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reliquary>;
    getContractAt(
      name: "ReliquaryEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReliquaryEvents>;
    getContractAt(
      name: "ReliquaryGamified",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReliquaryGamified>;
    getContractAt(
      name: "ReliquaryVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReliquaryVoting>;
    getContractAt(
      name: "ChildRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChildRewarder>;
    getContractAt(
      name: "DepositBonusRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositBonusRewarder>;
    getContractAt(
      name: "MultiplierRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiplierRewarder>;
    getContractAt(
      name: "MultiplierRewarderOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiplierRewarderOwnable>;
    getContractAt(
      name: "ParentRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParentRewarder>;
    getContractAt(
      name: "SingleAssetRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingleAssetRewarder>;
    getContractAt(
      name: "EmissionCurveMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmissionCurveMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "NftDescriptorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NftDescriptorMock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
