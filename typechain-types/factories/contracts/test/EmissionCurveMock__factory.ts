/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EmissionCurveMock,
  EmissionCurveMockInterface,
} from "../../../contracts/test/EmissionCurveMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastRewardTime",
        type: "uint256",
      },
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000004d0010019d0000000101200190000000070000c13d013000130000040f0000008001000039000000400010043f0000000001000416000000000110004c000000110000c13d0000002001000039000001000010044300000120000004430000004e01000041000001310001042e0000000001000019000001320001043000060000000000020000008001000039000000400010043f0000000001000031000000040110008c0000010d0000413d0000000101000367000000000101043b000000e0011002700000004f0210009c000000610000613d000000500210009c0000007c0000613d000000510110009c0000010d0000c13d0000000001000416000000000110004c0000010d0000c13d000000040100008a00000000011000310000005202000041000000200310008c000000000300001900000000030240190000005201100197000000000410004c000000000200a019000000520110009c00000000010300190000000001026019000000000110004c0000010d0000c13d00000004010000390000000101100367000000000301043b000000000400041a0000ff0001400190000300000001001d000000a70000c13d000000ff0140019000000000020000190000000102006039000500000002001d0000000002000415000000050220008a00000020022000c9000000000110004c000000ab0000c13d000001000100008a000000000114016f00000001011001bf000000000010041b0000005a0140019700000101011001bf000000000010041b0000005901000041000000000230004c000000000103c0190000005b0210009c000000f00000413d000000400100043d00000044021000390000005f03000041000000000032043500000024021000390000000d030000390000000000320435000000570200004100000000002104350000000402100039000000200300003900000000003204350000004d020000410000004d0310009c0000000001028019000000400110021000000060011001c700000132000104300000000001000416000000000110004c0000010d0000c13d000000040100008a00000000011000310000005202000041000000200310008c000000000300001900000000030240190000005201100197000000000410004c000000000200a019000000520110009c00000000010300190000000001026019000000000110004c0000010d0000c13d00000004010000390000000101100367000000000101043b0130010f0000040f0000004d01000041000000400200043d0000004d0320009c00000000010240190000004001100210000001310001042e0000000001000416000000000110004c0000010d0000c13d000000040100008a00000000011000310000005202000041000000200310008c000000000300001900000000030240190000005201100197000000000410004c000000000200a019000000520110009c00000000010300190000000001026019000000000110004c0000010d0000c13d0000000101000039000000000101041a00000004020000390000000102200367000000000202043b000000000320004c0000009e0000613d000000010300008a00000000432300d9000000000331004b0000009e0000a13d000000610100004100000000001004350000001101000039000000040010043f0000006201000041000001320001043000000000212100a9000000400200043d00000000001204350000004d010000410000004d0320009c0000000001024019000000400110021000000063011001c7000001310001042e0000000002000415000000060220008a00000020022000c9000600000000001d000400000002001d000200000004001d000100000003001d00000053010000410000000000100439000000000100041000000004001004430000004d0100004100000000020004140000004d0320009c0000000001024019000000c00110021000000054011001c700008002020000390130012b0000040f00000001022001900000010d0000613d000000000101043b000000000110004c000000d80000c13d0000000204000029000000ff0140018f000000010110008c000000000100001900000001010060390000000402000029000000200220011a000000000201001f000000db0000c13d000001000100008a000000000114016f00000001011001bf000000000010041b0000000301000029000000000110004c0000000103000029000000470000613d0000005901000041000000000230004c000000000103c019000000590210009c0000004f0000213d0000000102000039000000000012041b000001070000013d0000000401000029000000200110011a000000000100001f000000400100043d00000064021000390000005503000041000000000032043500000044021000390000005603000041000000000032043500000024021000390000002e030000390000000000320435000000570200004100000000002104350000000402100039000000200300003900000000003204350000004d020000410000004d0310009c0000000001028019000000400110021000000058011001c700000132000104300000000103000039000000000013041b0000005c01000041000000000200041a000000000112016f000000000010041b000000400100043d00000000003104350000004d0200004100000000040004140000004d0540009c00000000040280190000004d0510009c00000000010280190000004001100210000000c002400210000000000112019f0000005d011001c70000800d020000390000005e04000041013001260000040f00000001012001900000010d0000613d0000004d01000041000000400200043d0000004d0320009c00000000010240190000004001100210000001310001042e000000000100001900000132000104300000005b0210009c000001140000813d0000000102000039000000000012041b000000000001042d000000400100043d00000044021000390000005f03000041000000000032043500000024021000390000000d030000390000000000320435000000570200004100000000002104350000000402100039000000200300003900000000003204350000004d020000410000004d0310009c0000000001028019000000400110021000000060011001c7000001320001043000000129002104210000000102000039000000000001042d0000000002000019000000000001042d0000012e002104230000000102000039000000000001042d0000000002000019000000000001042d0000013000000432000001310001042e0000013200010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000000000000000000000000000000000000000000000000000000000000034fcf437000000000000000000000000000000000000000000000000000000005776409400000000000000000000000000000000000000000000000000000000fe4b84df80000000000000000000000000000000000000000000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830200000200000000000000000000000000000024000000000000000000000000647920696e697469616c697a6564000000000000000000000000000000000000496e697469616c697a61626c653a20636f6e747261637420697320616c72656108c379a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008400000000000000000000000000000000000000000000000000000000000000000000000053444835ec580000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000053444835ec580001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff02000000000000000000000000000000000000200000000000000000000000007f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024985261746520746f6f20686967680000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020000000000000000000000000686be217761cd328dbbba7609c6b02dfab30cc0f74daa8b8d64b6ea2a593d5ce";

type EmissionCurveMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmissionCurveMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmissionCurveMock__factory extends ContractFactory {
  constructor(...args: EmissionCurveMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EmissionCurveMock> {
    return super.deploy(overrides || {}) as Promise<EmissionCurveMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EmissionCurveMock {
    return super.attach(address) as EmissionCurveMock;
  }
  override connect(signer: Signer): EmissionCurveMock__factory {
    return super.connect(signer) as EmissionCurveMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmissionCurveMockInterface {
    return new utils.Interface(_abi) as EmissionCurveMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EmissionCurveMock {
    return new Contract(address, _abi, signerOrProvider) as EmissionCurveMock;
  }
}
