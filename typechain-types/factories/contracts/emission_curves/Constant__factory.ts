/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Constant,
  ConstantInterface,
} from "../../../contracts/emission_curves/Constant";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a58061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635776409414602d575b600080fd5b604560383660046057565b5067016345785d8a000090565b60405190815260200160405180910390f35b600060208284031215606857600080fd5b503591905056fea2646970667358221220c70d2930dc78a879f0ec2e708038288770d1cae0b2f05ce49e82d1508866c3dd64736f6c63430008110033";

type ConstantConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConstantConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Constant__factory extends ContractFactory {
  constructor(...args: ConstantConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Constant> {
    return super.deploy(overrides || {}) as Promise<Constant>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Constant {
    return super.attach(address) as Constant;
  }
  override connect(signer: Signer): Constant__factory {
    return super.connect(signer) as Constant__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConstantInterface {
    return new utils.Interface(_abi) as ConstantInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Constant {
    return new Contract(address, _abi, signerOrProvider) as Constant;
  }
}
