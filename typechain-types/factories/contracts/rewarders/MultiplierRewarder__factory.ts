/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MultiplierRewarder,
  MultiplierRewarderInterface,
} from "../../../contracts/rewarders/MultiplierRewarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardMultiplier",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reliquary",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "relicId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "LogOnReward",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "relicId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "onDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "relicId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "onReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "relicId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawalAmount",
        type: "uint256",
      },
    ],
    name: "onWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    name: "pendingToken",
    outputs: [
      {
        internalType: "uint256",
        name: "pending",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "relicId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardAmount",
        type: "uint256",
      },
    ],
    name: "pendingTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "rewardTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "rewardAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reliquary",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000b9238038062000b9283398101604081905262000034916200014b565b6001600160a01b03808316608052811660a081905260008490556040805163f7c618c160e01b8152905163f7c618c1916004808201926020929091908290030181865afa1580156200008a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b091906200018c565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001149190620001b1565b6200012190600a620002eb565b60c05250620002fc915050565b80516001600160a01b03811681146200014657600080fd5b919050565b6000806000606084860312156200016157600080fd5b8351925062000173602085016200012e565b915062000183604085016200012e565b90509250925092565b6000602082840312156200019f57600080fd5b620001aa826200012e565b9392505050565b600060208284031215620001c457600080fd5b815160ff81168114620001aa57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200022d578160001904821115620002115762000211620001d6565b808516156200021f57918102915b93841c9390800290620001f1565b509250929050565b6000826200024657506001620002e5565b816200025557506000620002e5565b81600181146200026e5760028114620002795762000299565b6001915050620002e5565b60ff8411156200028d576200028d620001d6565b50506001821b620002e5565b5060208310610133831016604e8410600b8410161715620002be575081810a620002e5565b620002ca8383620001ec565b8060001904821115620002e157620002e1620001d6565b0290505b92915050565b6000620001aa60ff84168362000235565b60805160a05160c05161085162000341600039600061023101526000818161010d015261027a01526000818161014c01528181610195015261032b01526108516000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a51b10801161005b578063a51b1080146100f5578063bef26de01461008d578063e754de6314610108578063f7c618c11461014757600080fd5b806303004b471461008d5780630c155f03146100a157806326b41a06146100cb5780636f2c590a146100ec575b600080fd5b61009f61009b366004610638565b5050565b005b6100b46100af366004610638565b61016e565b6040516100c292919061065a565b60405180910390f35b6100de6100d9366004610638565b61022d565b6040519081526020016100c2565b6100de60005481565b61009f6101033660046106de565b61026f565b61012f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c2565b61012f7f000000000000000000000000000000000000000000000000000000000000000081565b604080516001808252818301909252606091829190602080830190803683370190505091507f0000000000000000000000000000000000000000000000000000000000000000826000815181106101c7576101c7610723565b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050610207848461022d565b8160008151811061021a5761021a610723565b6020026020010181815250509250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006000548361025e9190610739565b6102689190610764565b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102fb5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c792052656c6971756172792063616e2063616c6c20746869732066756e60448201526531ba34b7b71760d11b60648201526084015b60405180910390fd5b61030683838361030b565b505050565b600054156103525761035281610321858561022d565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061039b565b806001600160a01b0316837fcdc9fd371154c559abac08b9dcd2ad4487ea53751ef20089b83d76f95badc8508460405161038e91815260200190565b60405180910390a3505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526103069286929160009161042b9185169084906104a8565b80519091501561030657808060200190518101906104499190610786565b6103065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102f2565b60606104b784846000856104bf565b949350505050565b6060824710156105205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102f2565b600080866001600160a01b0316858760405161053c91906107cc565b60006040518083038185875af1925050503d8060008114610579576040519150601f19603f3d011682016040523d82523d6000602084013e61057e565b606091505b509150915061058f8783838761059a565b979650505050505050565b60608315610609578251600003610602576001600160a01b0385163b6106025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f2565b50816104b7565b6104b7838381511561061e5781518083602001fd5b8060405162461bcd60e51b81526004016102f291906107e8565b6000806040838503121561064b57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b8281101561069c5781516001600160a01b031684529284019290840190600101610677565b5050508381038285015284518082528583019183019060005b818110156106d1578351835292840192918401916001016106b5565b5090979650505050505050565b6000806000606084860312156106f357600080fd5b833592506020840135915060408401356001600160a01b038116811461071857600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761075e57634e487b7160e01b600052601160045260246000fd5b92915050565b60008261078157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561079857600080fd5b8151801515811461026857600080fd5b60005b838110156107c35781810151838201526020016107ab565b50506000910152565b600082516107de8184602087016107a8565b9190910192915050565b60208152600082518060208401526108078160408501602087016107a8565b601f01601f1916919091016040019291505056fea2646970667358221220d51f4e0d15d2e299941a8040726055032f73689125188cb4c411bdb8478d924e64736f6c63430008110033";

type MultiplierRewarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiplierRewarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiplierRewarder__factory extends ContractFactory {
  constructor(...args: MultiplierRewarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardMultiplier: PromiseOrValue<BigNumberish>,
    _rewardToken: PromiseOrValue<string>,
    _reliquary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiplierRewarder> {
    return super.deploy(
      _rewardMultiplier,
      _rewardToken,
      _reliquary,
      overrides || {}
    ) as Promise<MultiplierRewarder>;
  }
  override getDeployTransaction(
    _rewardMultiplier: PromiseOrValue<BigNumberish>,
    _rewardToken: PromiseOrValue<string>,
    _reliquary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardMultiplier,
      _rewardToken,
      _reliquary,
      overrides || {}
    );
  }
  override attach(address: string): MultiplierRewarder {
    return super.attach(address) as MultiplierRewarder;
  }
  override connect(signer: Signer): MultiplierRewarder__factory {
    return super.connect(signer) as MultiplierRewarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiplierRewarderInterface {
    return new utils.Interface(_abi) as MultiplierRewarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiplierRewarder {
    return new Contract(address, _abi, signerOrProvider) as MultiplierRewarder;
  }
}
