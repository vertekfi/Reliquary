/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GymInterface extends utils.Interface {
  functions: {
    "ITERATIONS()": FunctionFragment;
    "PRIME()": FunctionFragment;
    "createSeed(uint256[])": FunctionFragment;
    "reliquary()": FunctionFragment;
    "train(uint256[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ITERATIONS"
      | "PRIME"
      | "createSeed"
      | "reliquary"
      | "train"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ITERATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRIME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createSeed",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "reliquary", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "train",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ITERATIONS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reliquary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "train", data: BytesLike): Result;

  events: {};
}

export interface Gym extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GymInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ITERATIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    createSeed(
      relicIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reliquary(overrides?: CallOverrides): Promise<[string]>;

    train(
      relicIds: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

  PRIME(overrides?: CallOverrides): Promise<BigNumber>;

  createSeed(
    relicIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reliquary(overrides?: CallOverrides): Promise<string>;

  train(
    relicIds: PromiseOrValue<BigNumberish>[],
    proof: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    PRIME(overrides?: CallOverrides): Promise<BigNumber>;

    createSeed(
      relicIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reliquary(overrides?: CallOverrides): Promise<string>;

    train(
      relicIds: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ITERATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    PRIME(overrides?: CallOverrides): Promise<BigNumber>;

    createSeed(
      relicIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reliquary(overrides?: CallOverrides): Promise<BigNumber>;

    train(
      relicIds: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ITERATIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSeed(
      relicIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reliquary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    train(
      relicIds: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
