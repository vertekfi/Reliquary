/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EmissionCurveMock,
  EmissionCurveMockInterface,
} from "../../../contracts/test/EmissionCurveMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastRewardTime",
        type: "uint256",
      },
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806334fcf43714610046578063577640941461005b578063fe4b84df14610080575b600080fd5b610059610054366004610230565b610093565b005b61006e610069366004610230565b61009f565b60405190815260200160405180910390f35b61005961008e366004610230565b6100b5565b61009c816101e3565b50565b6000600154826100af9190610249565b92915050565b600054610100900460ff16158080156100d55750600054600160ff909116105b806100ef5750303b1580156100ef575060005460ff166001145b6101575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561017a576000805461ff0019166101001790555b61019960008311610193576753444835ec5800006101e3565b826101e3565b80156101df576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6753444835ec58000081111561022b5760405162461bcd60e51b815260206004820152600d60248201526c0a4c2e8ca40e8dede40d0d2ced609b1b604482015260640161014e565b600155565b60006020828403121561024257600080fd5b5035919050565b600081600019048311821515161561027157634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212208a19ebaf38c74a9cc8f3990baf84cdb8b94ba0d93aac613e424b1eca30fa3ee564736f6c634300080f0033";

type EmissionCurveMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmissionCurveMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmissionCurveMock__factory extends ContractFactory {
  constructor(...args: EmissionCurveMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EmissionCurveMock> {
    return super.deploy(overrides || {}) as Promise<EmissionCurveMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EmissionCurveMock {
    return super.attach(address) as EmissionCurveMock;
  }
  override connect(signer: Signer): EmissionCurveMock__factory {
    return super.connect(signer) as EmissionCurveMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmissionCurveMockInterface {
    return new utils.Interface(_abi) as EmissionCurveMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EmissionCurveMock {
    return new Contract(address, _abi, signerOrProvider) as EmissionCurveMock;
  }
}
