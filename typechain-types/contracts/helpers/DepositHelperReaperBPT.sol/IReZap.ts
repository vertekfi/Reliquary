/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IReZap {
  export type StepStruct = {
    startToken: PromiseOrValue<string>;
    endToken: PromiseOrValue<string>;
    inIdx: PromiseOrValue<BigNumberish>;
    outIdx: PromiseOrValue<BigNumberish>;
    jT: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BytesLike>;
    minAmountOut: PromiseOrValue<BigNumberish>;
  };

  export type StepStructOutput = [
    string,
    string,
    number,
    number,
    number,
    string,
    BigNumber
  ] & {
    startToken: string;
    endToken: string;
    inIdx: number;
    outIdx: number;
    jT: number;
    poolId: string;
    minAmountOut: BigNumber;
  };
}

export interface IReZapInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "zapIn((address,address,uint8,uint8,uint8,bytes32,uint256)[],address,uint256)": FunctionFragment;
    "zapInETH((address,address,uint8,uint8,uint8,bytes32,uint256)[],address)": FunctionFragment;
    "zapOut((address,address,uint8,uint8,uint8,bytes32,uint256)[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "WETH" | "zapIn" | "zapInETH" | "zapOut"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [
      IReZap.StepStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInETH",
    values: [IReZap.StepStruct[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOut",
    values: [
      IReZap.StepStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapInETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapOut", data: BytesLike): Result;

  events: {};
}

export interface IReZap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReZapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    zapIn(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapInETH(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapOut(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      cryptAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  zapIn(
    steps: IReZap.StepStruct[],
    crypt: PromiseOrValue<string>,
    tokenInAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapInETH(
    steps: IReZap.StepStruct[],
    crypt: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapOut(
    steps: IReZap.StepStruct[],
    crypt: PromiseOrValue<string>,
    cryptAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    zapIn(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInETH(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    zapOut(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      cryptAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    zapIn(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapInETH(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapOut(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      cryptAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zapIn(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapInETH(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapOut(
      steps: IReZap.StepStruct[],
      crypt: PromiseOrValue<string>,
      cryptAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
