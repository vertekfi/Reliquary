/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Constant,
  ConstantInterface,
} from "../../../contracts/emission_curves/Constant";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000000d0010019d0000008001000039000000400010043f0000000101200190000000250000c13d0000000001000031000000040110008c0000002d0000413d0000000101000367000000000101043b0000000f01100197000000100110009c0000002d0000c13d0000000001000416000000000110004c0000002d0000c13d000000040100008a00000000011000310000001102000041000000200310008c000000000300001900000000030240190000001101100197000000000410004c000000000200a019000000110110009c00000000010300190000000001026019000000000110004c0000002d0000c13d0000001201000041000000800010043f0000001301000041000000300001042e0000000001000416000000000110004c0000002d0000c13d0000002001000039000001000010044300000120000004430000000e01000041000000300001042e000000000100001900000031000104300000002f00000432000000300001042e00000031000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000057764094000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000020000000800000000000000000ac98194c759d7c6ffa3087d178847117a9aec7056ad2c70fdd41cbfc00e62ad9";

type ConstantConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConstantConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Constant__factory extends ContractFactory {
  constructor(...args: ConstantConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Constant> {
    return super.deploy(overrides || {}) as Promise<Constant>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Constant {
    return super.attach(address) as Constant;
  }
  override connect(signer: Signer): Constant__factory {
    return super.connect(signer) as Constant__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConstantInterface {
    return new utils.Interface(_abi) as ConstantInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Constant {
    return new Contract(address, _abi, signerOrProvider) as Constant;
  }
}
