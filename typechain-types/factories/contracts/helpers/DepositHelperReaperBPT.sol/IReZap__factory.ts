/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IReZap,
  IReZapInterface,
} from "../../../../contracts/helpers/DepositHelperReaperBPT.sol/IReZap";

const _abi = [
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "startToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "endToken",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "inIdx",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "outIdx",
            type: "uint8",
          },
          {
            internalType: "enum IReZap.JoinType",
            name: "jT",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
        ],
        internalType: "struct IReZap.Step[]",
        name: "steps",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "crypt",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInAmount",
        type: "uint256",
      },
    ],
    name: "zapIn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "startToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "endToken",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "inIdx",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "outIdx",
            type: "uint8",
          },
          {
            internalType: "enum IReZap.JoinType",
            name: "jT",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
        ],
        internalType: "struct IReZap.Step[]",
        name: "steps",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "crypt",
        type: "address",
      },
    ],
    name: "zapInETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "startToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "endToken",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "inIdx",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "outIdx",
            type: "uint8",
          },
          {
            internalType: "enum IReZap.JoinType",
            name: "jT",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
        ],
        internalType: "struct IReZap.Step[]",
        name: "steps",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "crypt",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cryptAmount",
        type: "uint256",
      },
    ],
    name: "zapOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IReZap__factory {
  static readonly abi = _abi;
  static createInterface(): IReZapInterface {
    return new utils.Interface(_abi) as IReZapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IReZap {
    return new Contract(address, _abi, signerOrProvider) as IReZap;
  }
}
